#!/usr/bin/python
#coding:utf-8
#Author:Jean

import nmap
import whois
from scapy.all import sr1,IP,ICMP
import requests
import json
from fake_useragent import UserAgent
import IPy
from bs4 import BeautifulSoup
import os,time

class HtmlReport(object):
	"""html报告"""
	HtmlMain = r"""
		<!DOCTYPE html>
		<html lang="en">
		<head>
			<meta charset="UTF-8">
			<title>AssetInfoCollRePort</title>
			<link href="http://libs.baidu.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">
			<h1 style="font-family: Microsoft YaHei">AssetInfoCollRePort</h1>
			<p class='attribute'><strong>目标 : </strong> %(value)s</p>
			<style type="text/css" media="screen">
		body  { font-family: Microsoft YaHei,Tahoma,arial,helvetica,sans-serif;padding: 20px;}
		</style>
		</head>
		<body>
			<table id='result_table' class="table table-condensed table-bordered table-hover">
				<colgroup>
					<col align='left' />
					<col align='right' />
					<col align='right' />
					<col align='right' />
				</colgroup>
				<tr id='header_row' class="text-center success" style="font-weight: bold;font-size: 14px;">
					<th>类型</th>
					<th>结果</th>
				</tr>
				%(table_tr)s
			</table>
		</body>
		</html>"""
 
	TableMain = """
		<tr class='failClass warning'>
			<td>%(Type)s</td>
			<td>%(result)s</td>
		</tr>"""

class GetAsset(object):

	"""docstring for GetAsset"""
	def __init__(self, domain,port,page,filename):
		self.domain=domain
		self.port=port
		self.page=page
		self.filename=filename

	def GetHeaders(self):
		ua = UserAgent()
		header ={
		"Connection":"keep-alive",
		"Upgrade-Insecure-Requests":"1",
		"User-Agent":"%s"%ua.random,
		"Accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",
		"Accept-Encoding":"gzip,deflate",
		"Accept-Language":"zh-CN,zh;q=0.9"
		}
		return header
	def JudgeIP(self,target):
		try:
			IPy.IP(target)
		except ValueError:
			return False
		return True

	def GetOsType(self):
		finalresult=''
		try:
			print("通过Ping判断操作系统类型".center(100,'*'))
			host=self.domain
			result = sr1(IP(dst=str(host))/ICMP(), timeout=1, verbose=0)

			if result == None:
				print("无返回结果!\n")
				finalresult="无返回结果!\n"
			elif int(result[IP].ttl)<=64:
				print("%s is Linux/Unix\n"%host)
				finalresult="%s is Linux/Unix\n"%host
			else:
				print("%s is Windows\n"%host)
				finalresult="%s is Windows\n"%host
		except Exception as e:
			print(e)
		return finalresult

	def GetWhois1(self):
		finalresult=''
		try:
			if not self.JudgeIP(self.domain):
				whoisresult=whois.whois(self.domain)
				print("%s的Whois信息"%self.domain.center(100,'*'))
				print(whoisresult)
				for (key1,value1) in whoisresult.items():
					finalresult+=(key1+":"+str(value1)+"<br>")
				
			else:
				print("无法获取IP的Whois信息")
				finalresult="无法获取IP的Whois信息"
		except Exception as e:
			print(e)
		return finalresult
	def GetWhois2(self):
		try:
			if not self.JudgeIP(self.domain):
				whois4cnresult=requests.post(url="http://whois.4.cn/api/main?domain=%s&refresh=1"%self.domain,headers=self.GetHeaders())
				whoisinfo=json.loads(whois4cnresult.text)
				print("%s的Whois信息(whois.4.cn查询):"%self.domain.center(100,'*'))
				print(whoisinfo['data']['meta_data'])
				print("\n")	
				return whoisinfo['data']['meta_data']
			else:
				print("无法获取IP的Whois信息")
				return "无法获取IP的Whois信息"
		except Exception as e:
			print(e)

	def GetWhois3(self):
		finalresult=''
		try:
			if not self.JudgeIP(self.domain):
				result=requests.post(url="http://whois.4.cn/api/whoishistory?domain=%s"%self.domain,headers=self.GetHeaders())
				whoishistory=json.loads(result.text)
				print("域名历史记录:".center(100,'*'))
				print("域名变更次数:%s\n"%whoishistory['data']['total'])
				print(whoishistory['data']['results'])
				finalresult+=("域名变更次数:%s<br>"%whoishistory['data']['total'])
				finalresult+="<br>"
				for k in whoishistory['data']['results']:
					for (key2,value2) in k.items():
						finalresult+=(key2+":"+str(value2)+"<br>")
					finalresult+="<br>"
			else:
				print("无法获取IP的Whois信息")
				finalresult+=("无法获取IP的Whois信息")
		except Exception as e:
			print(e)
		return finalresult

	def GetBeiAn(self):
		finalresult=''
		try:

			if not self.JudgeIP(self.domain):
				data=requests.get("http://icp.chinaz.com/%s"%self.domain)
				#print(data.text)
				soup=BeautifulSoup(data.text,'lxml')
				tag=soup.find_all('ul',attrs={'class':'bor-t1s IcpMain01'})
				print("备案信息查询".center(100,'*'))
				for i in tag:
					for j in i.find_all('li'):
						print(j.span.text.strip(),j.p.text.strip())
						finalresult+=j.span.text.strip()+":"+j.p.text.strip()+"<br>"
			else:
				print("无法获取IP的备案信息")
				finalresult="无法获取IP的备案信息"
		except Exception as e:
			print(e)
		return finalresult

	def GetIpAddress(self):
		finalresult=''
		try:
			print("地理位置信息".center(100,'*'))
			result = requests.get(url = 'http://ip-api.com/json/%s' % (self.domain))
			data = result.json()
			print(data)
			print("\n")
			for (key3,value3) in data.items():
				finalresult+=(key3+":"+str(value3)+"<br>")
		except Exception as e:
			print(e)
		return finalresult

	def GetPort(self):
		finalresult=''
		osresult=''
		portresult=''
		print("%s的扫描信息(Nmap)"%self.domain.center(100,'*'))
		try:
			nm=nmap.PortScanner()
			result=nm.scan(self.domain,ports='%s'%self.port,arguments='-T4 -v -A')
			print(result)
			host=list(result['scan'].keys())[0]
			print(host)
			hostinfo=result['scan'][str(host)]
			hostname=hostinfo['hostnames'][0]['name']
			hostnamestatus=hostinfo['status']['state']
			cmdline=result['nmap']['command_line']
			portinfo=hostinfo['tcp'].keys()
			print("Nmap执行的命令:%s\n"%cmdline)
			print("IP:%s\n"%host)
			print("主机名:%s\n"%hostname)
			print("主机状态:%s\n"%hostnamestatus)
			print("端口开放清单:%s\n"%portinfo)
			print("操作系统识别:\n")
			for i in range(0,len(hostinfo['osmatch'])):
				osinfo=hostinfo['osmatch'][i]['name']
				accuracy=hostinfo['osmatch'][i]['accuracy']
				print("操作系统可能为:%s,准确率:%s%%\n"%(osinfo,accuracy))
				osresult+="操作系统可能为:%s,准确率:%s%%<br>"%(osinfo,accuracy)
			print("端口服务识别:\n")
			for i in portinfo:
				print("%s is %s,服务名:%s,版本:%s,产品:%s\n"%(i,hostinfo['tcp'][int(i)]['state'],\
					hostinfo['tcp'][int(i)]['name'],hostinfo['tcp'][int(i)]['version'],hostinfo['tcp'][int(i)]['product']))
				portresult+="%s is %s,服务名:%s,版本:%s,产品:%s<br>"%(i,hostinfo['tcp'][int(i)]['state'],\
				hostinfo['tcp'][int(i)]['name'],hostinfo['tcp'][int(i)]['version'],hostinfo['tcp'][int(i)]['product'])
			finalresult+="Nmap执行的命令:%s<br>"%cmdline
			finalresult+="IP:%s<br>"%host
			finalresult+="主机名:%s<br>"%hostname
			finalresult+="主机状态:%s<br>"%hostnamestatus
			finalresult+="端口开放清单:%s<br>"%portinfo
			finalresult+="操作系统识别:<br>"
			finalresult+=osresult
			finalresult+="端口服务识别:<br>"
			finalresult+=portresult
		except Exception as e:
			print(e)
		return finalresult

	def GetIPinfo(self):
		finalresult=''
		try:
			if not self.JudgeIP(self.domain):
				result=requests.get("https://site.ip138.com/%s/"%self.domain,headers=self.GetHeaders())
				#print(result.text)
				soup=BeautifulSoup(result.text,'lxml')
				tag1=soup.find_all('div',attrs={'id':'J_ip_history'})
				#print(tag)
				for j in tag1:
					for k in j.find_all('p'):
						print(k.a.text+"-------"+k.span.text)
						finalresult+=(k.a.text+"-------"+k.span.text+"<br>")
			else:
				result=requests.get("https://site.ip138.com/%s"%self.domain,headers=self.GetHeaders())
				soup=BeautifulSoup(result.text,'lxml')
				tag2=soup.find_all('ul',attrs={'id':'list'})
				for m in tag2:
					for n in m.find_all('li'):
						if n.a:
							print(n.a.text+"------"+n.span.text)
							finalresult+=(n.a.text+"-------"+n.span.text+"<br>")
		except Exception as e:
			print(e)
		return finalresult